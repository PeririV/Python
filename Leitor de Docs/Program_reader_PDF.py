import PyPDF2
import re
import os
import sys
from pathlib import Path

# =============================================================================
# CONFIGURA√á√ÉO DE IDIOMAS
# =============================================================================

TEXTS = {
    "portugues": {
        "title": "ü¶æ EXTRAIDOR DE INFORMA√á√ïES DE PDF",
        "select_language": "Selecione o idioma / Select language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "folder_prompt": "üìÅ Digite o caminho da pasta com os arquivos PDF:",
        "folder_not_found": "‚ùå Pasta n√£o encontrada! Tente novamente.",
        "config_keywords": "üî§ CONFIGURA√á√ÉO DE PALAVRAS-CHAVE",
        "how_many_keywords": "Quantas palavras-chave voc√™ quer buscar? ",
        "enter_keyword": "Digite a palavra-chave {}: ",
        "invalid_number": "‚ùå Por favor, digite um n√∫mero v√°lido!",
        "starting_processing": "üöÄ INICIANDO PROCESSAMENTO",
        "no_pdfs_found": "‚ùå Nenhum arquivo PDF encontrado na pasta!",
        "pdfs_found": "üìö Arquivos PDF encontrados: {}",
        "keywords_for_search": "üîç Palavras-chave para busca: {}",
        "processing_file": "üìñ PROCESSANDO: {}",
        "analyzing_pdf": "üîç Analisando PDF: {}",
        "total_pages": "üìÑ Total de p√°ginas: {}",
        "keyword_found": "‚úÖ Palavra '{}' encontrada!",
        "keyword_not_found": "‚ùå Palavra '{}' n√£o encontrada",
        "result_item": "   Resultado {}: {}",
        "error_processing": "‚ùå Erro ao processar {}: {}",
        "final_summary": "üìä RESUMO FINAL DOS RESULTADOS",
        "file_header": "üìÅ ARQUIVO: {}",
        "no_keywords_found": "   ‚ùå Nenhuma palavra-chave encontrada neste arquivo",
        "processing_complete": "‚úÖ PROCESSAMENTO CONCLU√çDO!",
        "run_again": "üîÑ Deseja executar novamente? (s/n): ",
        "invalid_response": "‚ùå Por favor, digite 's' para sim ou 'n' para n√£o",
        "goodbye": "üëã Obrigado por usar o Extrator de PDF! At√© mais!",
        "press_enter_exit": "Pressione Enter para sair...",
        "program_interrupted": "üëã Programa interrompido pelo usu√°rio. At√© mais!",
        "unexpected_error": "‚ùå Erro inesperado: {}"
    },
    "english": {
        "title": "ü¶æ PDF INFORMATION EXTRACTOR",
        "select_language": "Select language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "folder_prompt": "üìÅ Enter the folder path with PDF files:",
        "folder_not_found": "‚ùå Folder not found! Please try again.",
        "config_keywords": "üî§ KEYWORDS CONFIGURATION",
        "how_many_keywords": "How many keywords do you want to search for? ",
        "enter_keyword": "Enter keyword {}: ",
        "invalid_number": "‚ùå Please enter a valid number!",
        "starting_processing": "üöÄ STARTING PROCESSING",
        "no_pdfs_found": "‚ùå No PDF files found in the folder!",
        "pdfs_found": "üìö PDF files found: {}",
        "keywords_for_search": "üîç Keywords for search: {}",
        "processing_file": "üìñ PROCESSING: {}",
        "analyzing_pdf": "üîç Analyzing PDF: {}",
        "total_pages": "üìÑ Total pages: {}",
        "keyword_found": "‚úÖ Keyword '{}' found!",
        "keyword_not_found": "‚ùå Keyword '{}' not found",
        "result_item": "   Result {}: {}",
        "error_processing": "‚ùå Error processing {}: {}",
        "final_summary": "üìä FINAL RESULTS SUMMARY",
        "file_header": "üìÅ FILE: {}",
        "no_keywords_found": "   ‚ùå No keywords found in this file",
        "processing_complete": "‚úÖ PROCESSING COMPLETED!",
        "run_again": "üîÑ Do you want to run again? (y/n): ",
        "invalid_response": "‚ùå Please enter 'y' for yes or 'n' for no",
        "goodbye": "üëã Thank you for using PDF Extractor! Goodbye!",
        "press_enter_exit": "Press Enter to exit...",
        "program_interrupted": "üëã Program interrupted by user. Goodbye!",
        "unexpected_error": "‚ùå Unexpected error: {}"
    },
    "russian": {
        "title": "ü¶æ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ò–ù–§–û–†–ú–ê–¶–ò–ò –ò–ó PDF",
        "select_language": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language:",
        "folder_prompt": "üìÅ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å PDF —Ñ–∞–π–ª–∞–º–∏:",
        "folder_not_found": "‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "config_keywords": "üî§ –ù–ê–°–¢–†–û–ô–ö–ê –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í",
        "how_many_keywords": "–°–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏? ",
        "enter_keyword": "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ {}: ",
        "invalid_number": "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!",
        "starting_processing": "üöÄ –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò",
        "no_pdfs_found": "‚ùå –í –ø–∞–ø–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤!",
        "pdfs_found": "üìö –ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: {}",
        "keywords_for_search": "üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: {}",
        "processing_file": "üìñ –û–ë–†–ê–ë–û–¢–ö–ê: {}",
        "analyzing_pdf": "üîç –ê–Ω–∞–ª–∏–∑ PDF: {}",
        "total_pages": "üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {}",
        "keyword_found": "‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{}' –Ω–∞–π–¥–µ–Ω–æ!",
        "keyword_not_found": "‚ùå –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
        "result_item": "   –†–µ–∑—É–ª—å—Ç–∞—Ç {}: {}",
        "error_processing": "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {}: {}",
        "final_summary": "üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢",
        "file_header": "üìÅ –§–ê–ô–õ: {}",
        "no_keywords_found": "   ‚ùå –í —ç—Ç–æ–º —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤",
        "processing_complete": "‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!",
        "run_again": "üîÑ –•–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–Ω–æ–≤–∞? (–¥/–Ω): ",
        "invalid_response": "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–¥' –¥–ª—è –¥–∞ –∏–ª–∏ '–Ω' –¥–ª—è –Ω–µ—Ç",
        "goodbye": "üëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ PDF —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
        "press_enter_exit": "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...",
        "program_interrupted": "üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
        "unexpected_error": "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {}"
    }
}


# =============================================================================
# FUN√á√ïES PRINCIPAIS
# =============================================================================

def selecionar_idioma():
    """Permite ao usu√°rio selecionar o idioma"""
    print("=" * 60)
    print(TEXTS["portugues"]["select_language"])
    print("1 - Portugu√™s")
    print("2 - English")
    print("3 - –†—É—Å—Å–∫–∏–π (Russian)")
    print("=" * 60)

    while True:
        escolha = input("Digite sua escolha (1-3): ").strip()
        if escolha == "1":
            return "portugues"
        elif escolha == "2":
            return "english"
        elif escolha == "3":
            return "russian"
        else:
            print(
                "‚ùå Op√ß√£o inv√°lida! Por favor, escolha 1, 2 ou 3 / Invalid option! Please choose 1, 2 or 3 / –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1, 2 –∏–ª–∏ 3")


def extrair_informacao_pdf(waytothedoc, palavra_chave, lang):
    """Extrai informa√ß√£o espec√≠fica ap√≥s uma palavra-chave no PDF"""
    try:
        with open(waytothedoc, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            text_complete = ""

            print(f"üîç {TEXTS[lang]['analyzing_pdf'].format(waytothedoc)}")
            print(f"üìÑ {TEXTS[lang]['total_pages'].format(len(reader.pages))}")

            for pag in range(len(reader.pages)):
                text_pag = reader.pages[pag].extract_text()
                text_complete += f" {text_pag}"

            # Padr√£o: palavra_chave seguida de qualquer coisa at√© quebra de linha ou ponto
            padrao = re.compile(
                f"{re.escape(palavra_chave)}\\s*[:]?\\s*(.+?)(?=\\n|\\.|$|;|,)",
                re.IGNORECASE
            )

            resultados = padrao.findall(text_complete)

            if resultados:
                print(f"‚úÖ {TEXTS[lang]['keyword_found'].format(palavra_chave)}")
                for i, resultado in enumerate(resultados, 1):
                    print(f"   {TEXTS[lang]['result_item'].format(i, resultado.strip())}")
                return resultados
            else:
                print(f"‚ùå {TEXTS[lang]['keyword_not_found'].format(palavra_chave)}")
                return None

    except Exception as e:
        print(f"‚ùå {TEXTS[lang]['error_processing'].format(waytothedoc, e)}")
        return None


def selecionar_pasta(lang):
    """Permite ao usu√°rio selecionar uma pasta com arquivos PDF"""
    while True:
        caminho = input(f"\n{TEXTS[lang]['folder_prompt']} ").strip()

        # Remove aspas se o usu√°rio colar o caminho com aspas
        caminho = caminho.strip('"\'')

        if os.path.exists(caminho):
            return caminho
        else:
            print(f"‚ùå {TEXTS[lang]['folder_not_found']}")


def listar_pdfs_na_pasta(caminho_pasta):
    """Lista todos os arquivos PDF na pasta selecionada"""
    pdfs = []
    for arquivo in os.listdir(caminho_pasta):
        if arquivo.lower().endswith('.pdf'):
            pdfs.append(os.path.join(caminho_pasta, arquivo))

    return pdfs


def obter_palavras_busca(lang):
    """Obt√©m as palavras-chave do usu√°rio"""
    palavras = []

    print(f"\n{TEXTS[lang]['config_keywords']}")
    print("=" * 40)

    try:
        num_palavras = int(input(TEXTS[lang]['how_many_keywords']))

        for i in range(num_palavras):
            palavra = input(TEXTS[lang]['enter_keyword'].format(i + 1)).strip()
            if palavra:
                palavras.append(palavra)

        return palavras
    except ValueError:
        print(f"‚ùå {TEXTS[lang]['invalid_number']}")
        return obter_palavras_busca(lang)


def processar_arquivos(pasta, palavras_busca, lang):
    """Processa todos os arquivos PDF na pasta com as palavras-chave"""
    print(f"\n{TEXTS[lang]['starting_processing']}")
    print("=" * 50)

    # Listar arquivos PDF
    arquivos_pdf = listar_pdfs_na_pasta(pasta)

    if not arquivos_pdf:
        print(f"‚ùå {TEXTS[lang]['no_pdfs_found']}")
        return

    print(f"üìö {TEXTS[lang]['pdfs_found'].format(len(arquivos_pdf))}")
    for arquivo in arquivos_pdf:
        print(f"   üìÑ {os.path.basename(arquivo)}")

    print(f"\nüîç {TEXTS[lang]['keywords_for_search'].format(', '.join(palavras_busca))}")

    # Processar cada arquivo
    resultados_totais = {}

    for arquivo_pdf in arquivos_pdf:
        print(f"\n{'=' * 60}")
        print(f"üìñ {TEXTS[lang]['processing_file'].format(os.path.basename(arquivo_pdf))}")
        print(f"{'=' * 60}")

        resultados_arquivo = {}

        for palavra in palavras_busca:
            resultado = extrair_informacao_pdf(arquivo_pdf, palavra, lang)
            resultados_arquivo[palavra] = resultado

        resultados_totais[os.path.basename(arquivo_pdf)] = resultados_arquivo

    return resultados_totais


def mostrar_resumo(resultados, lang):
    """Mostra um resumo final dos resultados"""
    print(f"\n{'=' * 70}")
    print(f"üìä {TEXTS[lang]['final_summary']}")
    print(f"{'=' * 70}")

    for arquivo, palavras in resultados.items():
        print(f"\nüìÅ {TEXTS[lang]['file_header'].format(arquivo)}")
        print("-" * 50)

        encontrou_algo = False
        for palavra, resultados_palavra in palavras.items():
            if resultados_palavra:
                encontrou_algo = True
                print(f"   üîç '{palavra}':")
                for i, resultado in enumerate(resultados_palavra, 1):
                    print(f"      {i}. {resultado}")

        if not encontrou_algo:
            print(f"   ‚ùå {TEXTS[lang]['no_keywords_found']}")


def executar_novamente(lang):
    """Pergunta se o usu√°rio quer executar novamente"""
    while True:
        resposta = input(f"\n{TEXTS[lang]['run_again']}").strip().lower()

        if lang == "portugues":
            if resposta in ['s', 'sim']:
                return True
            elif resposta in ['n', 'n√£o', 'nao']:
                return False
        elif lang == "english":
            if resposta in ['y', 'yes']:
                return True
            elif resposta in ['n', 'no']:
                return False
        elif lang == "russian":
            if resposta in ['–¥', '–¥–∞', 'y', 'yes']:
                return True
            elif resposta in ['–Ω', '–Ω–µ—Ç', 'n', 'no']:
                return False

        print(f"‚ùå {TEXTS[lang]['invalid_response']}")


def main():
    """Fun√ß√£o principal do programa"""
    # Selecionar idioma primeiro
    lang = selecionar_idioma()

    print(f"\n{TEXTS[lang]['title']}")
    print("=" * 50)
    print("Este programa busca palavras-chave em arquivos PDF e extrai" if lang == "portugues" else
          "This program searches for keywords in PDF files and extracts" if lang == "english" else
          "–≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏—â–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ PDF —Ñ–∞–π–ª–∞—Ö –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç")
    print("o conte√∫do que vem ap√≥s essas palavras." if lang == "portugues" else
          "the content that comes after those words." if lang == "english" else
          "—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –∫–æ—Ç–æ—Ä–æ–µ –∏–¥–µ—Ç –ø–æ—Å–ª–µ —ç—Ç–∏—Ö —Å–ª–æ–≤.")
    print("=" * 50)

    # Configura√ß√µes do usu√°rio
    pasta = selecionar_pasta(lang)
    palavras_busca = obter_palavras_busca(lang)

    if not palavras_busca:
        print("‚ùå Nenhuma palavra-chave foi informada!" if lang == "portugues" else
              "‚ùå No keywords were provided!" if lang == "english" else
              "‚ùå –ù–µ –±—ã–ª–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤!")
        return

    # Processar arquivos
    resultados = processar_arquivos(pasta, palavras_busca, lang)

    if resultados:
        mostrar_resumo(resultados, lang)

    print(f"\n{'=' * 70}")
    print(f"‚úÖ {TEXTS[lang]['processing_complete']}")
    print("=" * 70)


# =============================================================================
# EXECU√á√ÉO DO PROGRAMA
# =============================================================================

if __name__ == "__main__":
    try:
        while True:
            main()
            # Manter o mesmo idioma para a pr√≥xima execu√ß√£o ou perguntar?
            if not executar_novamente(lang):
                print(f"\n{TEXTS[lang]['goodbye']}")
                break
    except KeyboardInterrupt:
        print(f"\n\n{TEXTS[lang]['program_interrupted']}")
    except Exception as e:
        lang = "portugues"  # Idioma padr√£o em caso de erro
        print(f"\n‚ùå {TEXTS[lang]['unexpected_error'].format(e)}")

    # Manter a janela aberta (especialmente para Windows .exe)
    input(f"\n{TEXTS[lang]['press_enter_exit']}")